import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

apply plugin: "java-library"
apply plugin: "groovy"

dependencies {

    api resolveProject(":setup")

    api "org.codehaus.groovy:groovy-all:$groovyVersion"

    api "junit:junit:$junitVersion"
    api "org.spockframework:spock-core:$spockVersion"

    api "org.glassfish.tyrus:tyrus-client:$tyrusVersion"
    api "org.glassfish.tyrus:tyrus-container-grizzly-client:$tyrusVersion"
    api "org.objenesis:objenesis:$objenesisVersion"
    api "net.bytebuddy:byte-buddy:$byteBuddyVersion"

    api("com.github.calimero:calimero-server:$calimeroVersion") {
        // Libraries should not depend on a logging implementation and/or alpha versions!
        exclude group: "org.slf4j"
    }
}

test {
    workingDir = findProject(":openremote") != null ? resolveProject("").projectDir : rootProject.projectDir
    outputs.upToDateWhen {false}
    useJUnitPlatform()
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterTest { desc, result ->
            logger.quiet "${desc.className} > ${desc.name} took: ${(result.endTime - result.startTime)}ms"
        }

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
