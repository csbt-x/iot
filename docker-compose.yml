# OpenRemote v3
#
# By default running this profile installs the stack on https://localhost using a
# self-signed SSL certificate, with username 'admin' and password 'secret'.
#
# Install Docker Community edition (https://docker.com/) on Windows, macOS, or Linux.
#
# Start a demo stack in the project root directory with:
#
#   docker-compose up
#
# For full documentation, see profile/deploy.yml
#
# Steps to create a permanent installation:
#
# 1. DO NOT FORGET TO CHANGE SETUP_ADMIN_PASSWORD!
#
# 2. Consider setting a custom DOMAINNAME, LE_EMAIL, and IDENTITY_NETWORK_HOST, see deploy.yml
#
# 3. Understand how bind mounts and volume mappings work, see below and read:
#     https://docs.docker.com/engine/admin/volumes/bind-mounts/
#     https://docs.docker.com/engine/admin/volumes/volumes/#choose-the--v-or-mount-flag
#     Survival guide: docker volume ls|rm|prune
#
# 4. Execute once:
#
#   SETUP_WIPE_CLEAN_INSTALL=true \
#   SETUP_ADMIN_PASSWORD=secret \
#   docker-compose up
#
# This creates the initial database and optionally imports some examples. Inspect the
# running installation and ensure it's working. You should now stop the stack and remove
# all containers. It is important that you recreate the containers and start again WITHOUT
# the SETUP_WIPE_CLEAN_INSTALL setting! Passwords can be changed in the application.
#
# Database schemas will be upgraded to new versions of the services automatically, you do
# not have to wipe all data to install a new version of OpenRemote.
#
# Your extension JAR files should be in the deployment/manager/extensions/ directory.
#
version: '2.4'

# If you enable volume mappings in services, you need this. Otherwise, remove the volumes
volumes:
  proxy-data:
  deployment-data:
  postgresql-data:

services:

  # This service will only populate an empty volume on startup and then exit.
  # If the volume already contains data, it exits immediately.
  deployment:
    build: 'deployment'
    image: openremote/deployment:${DATE_TAG:-latest}
    volumes:
      - deployment-data:/deployment

  # This configuration does not store SSL certificate data and allow changes to the
  # proxy configuration, it is only configured for deployment on localhost. You can
  # map a Docker volume or host directory to access/store proxy configuration files
  # and SSL certificates.
  proxy:
    extends:
      file: profile/deploy.yml
      service: proxy
    depends_on:
      manager:
        condition: service_healthy
    volumes:
      - proxy-data:/deployment
      # Override the haproxy.cfg with custom file
      # -${MY_PROXY_CONFIG_FILE}:/etc/haproxy/haproxy.cfg

  # This configuration uses the manager's deployment-specific data such as map tiles,
  # console application static resources (HTML, JS, CSS), extensions, and other
  # configuration files which were baked into the managers image.
  manager:
    extends:
      file: profile/deploy.yml
      service: manager
    depends_on:
      keycloak:
        condition: service_healthy
    volumes:
      - deployment-data:/deployment

  keycloak:
    extends:
      file: profile/deploy.yml
      service: keycloak
    depends_on:
      postgresql:
        condition: service_healthy
    volumes:
      - deployment-data:/deployment

  # This configuration stores postgresql data in a Docker volume. You manage this volume
  # independently from your stack with with 'docker volume ls', 'docker volume rm', etc.
  # Alternatively, you can store postgresql data in a directory on your host.
  postgresql:
    extends:
      file: profile/deploy.yml
      service: postgresql
    volumes:
      - postgresql-data:/var/lib/postgresql/data
