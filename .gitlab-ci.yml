default:
  interruptible: true
  image: docker:latest
  services:
    - docker:dind
  timeout: 1h 30m

variables:
  PROJECT_NAME: demo
  GIT_SUBMODULE_STRATEGY: normal
  DEPLOYMENT_HOST_USER: root
  DEPLOYMENT_PORT: 2222
  DAST_WEBSITE: https://staging.${PROJECT_NAME}.openremote.io

stages:
  - build
  - build_fail
  - test
  - tests_fail
  - deploy
  - dast
  - cleanup

lint-Dockerfile:
  stage: build
  script:
    - docker pull hadolint/hadolint
    - docker run --rm -i hadolint/hadolint < Dockerfile
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      if: $CI_COMMIT_MESSAGE !~ /skip-build/
      when: manual

lint-swarm-Dockerfile:
  stage: build
  script:
    - docker pull hadolint/hadolint
    - docker run --rm -i hadolint/hadolint < ./manager/swarm.Dockerfile
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      if: $CI_COMMIT_MESSAGE !~ /skip-build/

build-master:
  stage: build
  before_script:
    - export DOCKER_CLI_EXPERIMENTAL=enabled
    - mkdir -p /root/.docker/cli-plugins
    - mv .docker/cli-plugins/docker-buildx /root/.docker/cli-plugins/
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASSWORD"
  script:
    - docker buildx use default
    - docker buildx ls
    - docker context ls
    - docker buildx build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - docker run -v $(pwd):/or "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
      /bin/sh -c "./gradlew --console plain clean installDist"
    - docker run -v $(pwd):/or
      -v /var/run/docker.sock:/var/run/docker.sock
      "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
      /bin/sh -c "docker-compose -f profile/deploy.yml build --build-arg GIT_COMMIT=$SOURCE_COMMIT"
    - docker push openremote/deployment:${CACHE_TAG:-latest}
    - docker push openremote/manager:${CACHE_TAG:-latest}
    - docker push openremote/manager-swarm:${CACHE_TAG:-latest}
    - docker push openremote/proxy:${CACHE_TAG:-latest}
    - docker push openremote/keycloak:${CACHE_TAG:-latest}
    - docker push openremote/postgresql:${CACHE_TAG:-latest}
    ## TODO dind does not support arm64 archieture for now, therefore the code below breaks the build
    # # Build ARM images
    # - docker buildx build --platform linux/arm64 -t openremote/manager:arm64 manager/build/install/manager
    # - docker buildx build --platform linux/arm64 -t openremote/deployment:arm64 deployment
    # - docker buildx build --platform linux/arm64 -t openremote/proxy:arm64 proxy
    # - docker buildx build --platform linux/arm64 -t openremote/keycloak:arm64 keycloak
    # - docker buildx build --platform linux/arm64 -t openremote/postgresql:arm64 postgresql
    # # Push ARM images
    # - docker push openremote/manager:arm64
    # - docker push openremote/deployment:arm64
    # - docker push openremote/proxy:arm64
    # - docker push openremote/keycloak:arm64
    # - docker push openremote/postgresql:arm64
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      if: $CI_COMMIT_MESSAGE !~ /skip-build/

.email_template: &email_definition
  image: docker:latest
  script:
    - docker pull registry.gitlab.com/openremote/openremote:master
    - export WHO=$(docker run --rm -v $(pwd):/or registry.gitlab.com/openremote/openremote:master git log --pretty="%ce" -1)
    - export WHEN=$(docker run --rm -v $(pwd):/or registry.gitlab.com/openremote/openremote:master git log --pretty="%ad %ar" -1)
    - export WHAT=$(docker run --rm -v $(pwd):/or registry.gitlab.com/openremote/openremote:master git log --pretty="%h %s" -1)
    - export REPO=$(docker run --rm -v $(pwd):/or registry.gitlab.com/openremote/openremote:master git remote get-url origin|xargs basename)
    - echo $REPO
    - docker run -v $(pwd):/usr/src/myapp -w /usr/src/myapp
      -e "STAGE=$STAGE"
      -e "WHO=$WHO"
      -e "WHAT=$WHAT"
      -e "WHEN=$WHEN"
      -e "REPO=$REPO"
      -e "SMTP_USERNAME=$SMTP_USERNAME"
      -e "SMTP_PASSWORD=$SMTP_PASSWORD"
      --rm python:3 python gitlab-ci/aws-mail.py

# This step is executed when build fails. The purpose is to e-mail a git commiter about the problem.
email failed build:
  stage: build_fail
  before_script:
    - export STAGE='docker images build'
  <<: *email_definition
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      if: $CI_COMMIT_MESSAGE !~ /skip-build/
      when: on_failure

test-master:
  before_script:
    - docker run -v $(pwd):/or
      -v /var/run/docker.sock:/var/run/docker.sock "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
      /bin/sh -c "docker-compose -f profile/dev-testing.yml pull"
    - docker run -v $(pwd):/or
      -v /var/run/docker.sock:/var/run/docker.sock "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
      /bin/sh -c "docker-compose -f profile/dev-testing.yml up --no-build -d"
  script:
    - docker run --network host -v $(pwd):/or "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
      /bin/sh -c "./gradlew clean build installDist"
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      if: $CI_COMMIT_MESSAGE !~ /skip-test/
      when: on_success
  artifacts:
    when: on_failure
    paths:
      - "test/build/reports/tests/test/*"
      - "test/build/reports/tests/test/*/*"
    expire_in: 2 weeks

email failed tests:
  stage: tests_fail
  before_script:
    - export STAGE='tests'
  <<: *email_definition
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      if: $CI_COMMIT_MESSAGE !~ /skip-test/
      when: on_failure

.ssh_config: &ssh_config
- mkdir -p ~/.ssh
- chmod 600 "$GITLAB_SSH_PRIVATE_KEY"
- eval "$(ssh-agent -s)"
- ssh-add "$GITLAB_SSH_PRIVATE_KEY"
- ssh-keyscan -H -p $DEPLOYMENT_PORT $DEPLOYMENT_HOST >> ~/.ssh/known_hosts
- alias SSH="ssh -p $DEPLOYMENT_PORT ${DEPLOYMENT_HOST_USER}@${DEPLOYMENT_HOST}"
- alias SCP="scp -p -r -P $DEPLOYMENT_PORT"

.deploy_template: &deploy_definition
  stage: deploy
  before_script:
    - *ssh_config
  script:
    - echo "Deploy to $CI_ENVIRONMENT_SLUG server"
    - echo "export CI_REGISTRY_IMAGE=openremote" >> deploy.sh
    - if [ ! $DOCKER_IMAGE_TAG ]; then echo "export CI_ENVIRONMENT=$CI_ENVIRONMENT_SLUG" >> deploy.sh; fi
    - if [ $DOCKER_IMAGE_TAG ]; then echo "export CI_ENVIRONMENT=$DOCKER_IMAGE_TAG" >> deploy.sh; fi
    - echo "export SETUP_WIPE_CLEAN_INSTALL=$SETUP_WIPE_CLEAN_INSTALL" >> deploy.sh
    - if [ $SETUP_ADMIN_PASSWORD ]; then echo "export SETUP_ADMIN_PASSWORD=$SETUP_ADMIN_PASSWORD" >> deploy.sh; fi
    - echo "echo ${OR_PASSWORD} | docker login -u openremote --password-stdin $CI_REGISTRY || exit 666" >> deploy.sh
    - echo "docker pull $CI_REGISTRY_IMAGE/manager:\$CI_ENVIRONMENT"   >> deploy.sh
    - echo "docker pull $CI_REGISTRY_IMAGE/deployment:\$CI_ENVIRONMENT">> deploy.sh
    - echo "docker pull $CI_REGISTRY_IMAGE/proxy:\$CI_ENVIRONMENT"     >> deploy.sh
    - echo "docker pull $CI_REGISTRY_IMAGE/postgresql:\$CI_ENVIRONMENT">> deploy.sh
    - echo "docker pull $CI_REGISTRY_IMAGE/keycloak:\$CI_ENVIRONMENT"  >> deploy.sh
    - echo "docker-compose -p $PROJECT_NAME -f profile/demo-openremote.yml down || exit 666" >> deploy.sh
    - echo "docker volume rm ${PROJECT_NAME}_deployment-data" >> deploy.sh
    - echo "docker-compose -p $PROJECT_NAME -f profile/demo-openremote.yml up --no-build -d || exit 666" >> deploy.sh
    - chmod +x deploy.sh
    - SSH mkdir -p profile openremote/profile deployment openremote/proxy openremote/manager/build/install/manager openremote/postgresql openremote/keycloak
    - SCP ./profile/ deploy.sh ${DEPLOYMENT_HOST_USER}@${DEPLOYMENT_HOST}:~/
    - SSH ./deploy.sh
    - SSH "docker system prune -f; docker images -q --filter dangling=true | xargs docker rmi; rm -rf openremote/ profile/ deployment/ deploy.sh .docker/config.json"
  after_script:
    - *ssh_config
    - SSH "docker logs ${PROJECT_NAME}_proxy_1 &> proxy_${CI_ENVIRONMENT_SLUG}.log"
    - SSH "docker logs ${PROJECT_NAME}_manager_1 &> manager_${CI_ENVIRONMENT_SLUG}.log"
    - SSH "docker logs ${PROJECT_NAME}_keycloak_1 &> keycloak_${CI_ENVIRONMENT_SLUG}.log"
    - SSH "docker logs ${PROJECT_NAME}_postgresql_1 &> postgresql_${CI_ENVIRONMENT_SLUG}.log"
    - SCP ${DEPLOYMENT_HOST_USER}@${DEPLOYMENT_HOST}:~/*.log .
    - SSH "rm ~/*.log"
  artifacts:
    paths:
    - proxy_${CI_ENVIRONMENT_SLUG}.log
    - manager_${CI_ENVIRONMENT_SLUG}.log
    - keycloak_${CI_ENVIRONMENT_SLUG}.log
    - postgresql_${CI_ENVIRONMENT_SLUG}.log
    expire_in: 1 week

deploy masterdemo on AWS:
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  stage: deploy
  script:
    - aws cloudformation create-stack --stack-name $AWS_STACK_NAME --template-body file://gitlab-ci/aws-cloudformation.template.yml
  after_script:
    - aws cloudformation wait stack-create-complete --stack-name $AWS_STACK_NAME
    - aws cloudformation describe-stacks --stack-name $AWS_STACK_NAME
  allow_failure: true # set when:manual optional and not blocking
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      if: $CI_COMMIT_MESSAGE !~ /skip-deploy/
      when: manual

deploy demo on OVH:
  stage: deploy
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      if: $CI_COMMIT_MESSAGE !~ /skip-deploy/
      when: manual
  variables:
    DEPLOYMENT_HOST: ${PROJECT_NAME}.openremote.io
    SETUP_WIPE_CLEAN_INSTALL: 'true'
    DOCKER_IMAGE_TAG: latest
  environment:
    name: demo
    url: https://${PROJECT_NAME}.openremote.io
  <<: *deploy_definition

auto delete aws cloudformation stack after 8 hours:
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  stage: cleanup
  script:
    - aws cloudformation delete-stack --stack-name $AWS_STACK_NAME
    - aws cloudformation wait stack-delete-complete --stack-name $AWS_STACK_NAME
  allow_failure: true # set when:manual optional and not blocking
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      if: $CI_COMMIT_MESSAGE !~ /skip-deploy/
      when: delayed
      start_in: '8 hours'

manual delete aws cloudformation stack:
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  stage: cleanup
  before_script:
    - |-
      PAYLOAD=$(cat << JSON
      {
        "select":{"include":"ALL_EXCEPT_PATH"},
        "type":{"predicateType":"string","value":"urn:openremote:asset:flight"}
      }
      JSON
      )
    - echo $PAYLOAD
    - export OR_ENDPOINT=$(aws cloudformation describe-stacks --stack-name openremote
      --query "Stacks[0].Outputs[?OutputKey=='InstanceIP'].OutputValue" --output text)
    - >
      curl -X POST --insecure https://$OR_ENDPOINT/api/master/asset/query 
      --header 'Content-Type: application/json; charset=utf-8'
      --data-binary "$PAYLOAD"
  script:
    - aws cloudformation delete-stack --stack-name $AWS_STACK_NAME
    - aws cloudformation wait stack-delete-complete --stack-name $AWS_STACK_NAME
  allow_failure: true # set when:manual optional and not blocking
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      if: $CI_COMMIT_MESSAGE !~ /skip-deploy/
      when: manual
