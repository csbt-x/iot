---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Template to install OpenRemote 3 stack on AWS environment on ubuntu'
Parameters:
  OpenRemotePassword:
    Description: Password for OpenRemote admin login
    Type: String
    Default: secret
  DomainName:
    Description: DNS domain for created stack (clear it is you want the deployment with an insecure SSL certificate)
    Type: String
    Default: developers.openremote.io
  HostName:
    Description: Hostname of the Openremote manager
    Type: String
    Default: demo
  HostedZone:
    Description: Use AWS hosted zone
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: openremote
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type (don't change it unless you know what you are doing)
    Type: String
    # AWS Compute Optimizer reports that this instance type is under-provisioned and advise to use
    # more than double the price instance. However, it works in our test setup.
    Default: t3a.small
    ConstraintDescription: must be a valid EC2 instance type.
  InstanceAMI:
    Description: Managed AMI ID for EC2 Instance (don't change it unless you know what you are doing)
    Type : String
    Default: ami-022e8cc8f0d3c52fd
Conditions:
  DnsRecordCreate: !Equals [!Ref HostedZone, true]
  DomainName: !Not [ !Equals [!Ref DomainName, ""] ]
Outputs:
    InstanceIP:
      Description: The Instance public IP
      Value: !GetAtt EC2Instance.PublicIp
    PublicUrl:
      Condition: DnsRecordCreate
      Description: OpenRemote Instance URL
      Value: !Join [ ".", [ !Ref HostName, !Ref DomainName ] ]
    UserId:
      Description: SMTP server username
      Value: !Ref AccessKeys
    UserSecret:
      Description: SMTP server password
      Value: !GetAtt AccessKeys.SecretAccessKey
    SmtpServer:
      Value: !Join [ ".", [ "email-smtp", !Ref "AWS::Region", "amazonaws.com"]]
Resources:
  EmailUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
      - PolicyName: OpenRemoteSendEmail
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - ses:SendRawEmail
            Resource:
              - '*'
  AccessKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref EmailUser
  DNSRecord:
    Condition: DnsRecordCreate
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join [ "", [ !Ref DomainName, "." ] ]
      Name: !Join [ ".", [!Ref HostName, !Ref DomainName ] ]
      ResourceRecords:
      - !GetAtt EC2Instance.PublicIp
      TTL: '60'
      Type: A
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      ImageId:
        Ref: InstanceAMI
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      Tags:
        - Key: "Name"
          Value: !Join [ ".", [ !Ref HostName, !Ref DomainName ] ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt update
          # Install docker
          sudo groupadd docker
          sudo gpasswd -a ubuntu docker
          sudo apt install docker.io -y
          sudo apt install docker-compose -y
          # SNMP tools
          sudo apt install snmp snmpd snmptt snmptrapd -y
          # Install openremote-cli tool
          sudo apt install python3-pip -y
          sudo pip3 install -U openremote-cli
          cd /home/ubuntu
          # Create volume for deployment (needed for SWARM due to concurency in compose-file)
          # docker volume create openremote_deployment-data
          # docker run --rm -v openremote_deployment-data:/deployment openremote/deployment:mvp
          wget https://github.com/openremote/openremote/raw/master/mvp/mvp-docker-compose.yml
          docker swarm init
          if [ ${HostName} ] && [ ${DomainName} ]
          then
            export DOMAINNAME=${HostName}.${DomainName}
            export IDENTITY_NETWORK_HOST=$DOMAINNAME
            echo a $DOMAINNAME $IDENTITY_NETWORK_HOST
          elif [ ${DomainName} ]
          then
            export DOMAINNAME=${DomainName}
            export IDENTITY_NETWORK_HOST=$DOMAINNAME
            echo b $DOMAINNAME $IDENTITY_NETWORK_HOST
          elif [ ${HostName} ]
          then
            export DOMAINNAME=${HostName}
            export IDENTITY_NETWORK_HOST=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
            echo c $DOMAINNAME $IDENTITY_NETWORK_HOST
          else
            export DOMAINNAME=localhost
            export IDENTITY_NETWORK_HOST=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
            echo d $DOMAINNAME $IDENTITY_NETWORK_HOST
          fi
          openremote-cli -V -t
          export PASSWORD=${OpenRemotePassword}
          export EMAIL_USER=${AccessKeys}
          export EMAIL_PASSWORD=$(or configure_aws --secret ${AccessKeys.SecretAccessKey} --quiet)
          export EMAIL_HOST=email-smtp.eu-west-1.amazonaws.com
          docker-compose -f mvp-docker-compose.yml -p openremote up -d
          echo USER=${AccessKeys} > access.txt
          echo SECRET=${AccessKeys.SecretAccessKey} >> access.txt
          echo export EMAIL_PASSWORD=$(or configure_aws --secret ${AccessKeys.SecretAccessKey} --quiet) >> access.txt
          echo export EMAIL_USER=$EMAIL_USER >> access.txt
          echo export EMAIL_HOST=$EMAIL_HOST >> access.txt
          echo export PASSWORD=${OpenRemotePassword} >> access.txt
          echo export DOMAINNAME=$DOMAINNAME >> access.txt
          echo export IDENTITY_NETWORK_HOST=$IDENTITY_NETWORK_HOST >> access.txt
          mkdir ${HostName}
          cd ${HostName}
          wget https://github.com/openremote/openremote/raw/master/mvp/fetch_s3_deploy.sh -O fetch.txt
          cat ../access.txt ./fetch.txt > fetch_s3_deploy.sh
          chmod +x fetch_s3_deploy.sh
          rm fetch.txt

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH + HTTP + HTTPS + MQTT + ping
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
        Description: SSH
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
        Description: HTTP
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
        Description: HTTPS
      - IpProtocol: tcp
        FromPort: '8883'
        ToPort: '8883'
        CidrIp: 0.0.0.0/0
        Description: MQTT
      - IpProtocol: udp
        FromPort: '161'
        ToPort: '162'
        CidrIp: 0.0.0.0/0
        Description: SNMP
      - IpProtocol: icmp
        FromPort: '8'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
        Description: Ping