# Automatic or manual deployment of the stack using specified docker manager image tag from docker hub
# or alternatively a git commit can be sepcified to build a custom manager image for deployment

name: Deploy

on:
  # Manually request a deploy
  workflow_dispatch:
    inputs:
      host:
        description: 'Host to deploy to'
        required: true
      password:
        description: 'Admin password to use'
      managerTag:
        description: 'Manager docker tag to pull'
      managerCommit:
        description: 'Repo branch or commit SHA to use'
      environment:
        description: 'Environment to use (if any)'
      
        
  # Docker push webhook trigger
  repository_dispatch:
    types: [docker-push]

env:
  environment: staging

jobs:

  config:
    outputs:
      host: ${{ steps.host.outputs.host }}
      password: ${{ steps.password.outputs.password }}
      managerTag: ${{ steps.managerTag.outputs.managerTag }}
      managerCommit: ${{ steps.managerCommit.outputs.managerCommit }}
      environment: ${{ steps.environment.outputs.value }}
      composeFile: ${{ env.COMPOSE_FILE }}
    name: Evaluate inputs
    runs-on: ubuntu-latest
    
    steps:
      - name: Login to DockerHub
        if: github.event.inputs.managerTag != ''
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          
      - name: Host input missing
        if: ${{ github.event.inputs.host == '' }}
        run: exit 1
        
      - name: Set host output
        id: host
        run: echo "::set-output name=host::${{ github.event.inputs.host }}"

      - name: Check commit input
        if: (github.event.inputs.managerCommit != '') && (github.event.inputs.managerTag == '')
        uses: actions/checkout@v2
        with:
          ref: ${{github.event.inputs.managerCommit}}
        
      - name: Output commit input
        if: (github.event.inputs.managerCommit != '') && (github.event.inputs.managerTag == '')
        id: managerCommit
        run: echo "::set-output name=managerCommit::${{ github.event.inputs.managerCommit }}"
        
      - name: Check manager tag input
        if: github.event.inputs.managerTag != ''
        id: managerTag
        run: |
          docker manifest inspect openremote/manager:${{ github.event.inputs.managerTag }} > /dev/null 2> /dev/null
          echo "::set-output name=managerTag::${{ github.event.inputs.managerTag }}"
        
      - name: Check environment input
        if: github.event.inputs.environment != ''
        id: environment
        run: echo "::set-output name=value::${{ github.event.inputs.environment }}"
        
      - name: Check environment compose file existence
        if: github.event.inputs.environment != ''
        id: check_env_compose
        uses: andstor/file-existence-action@v1
        with:
          files: "profile/${{github.event.inputs.environment}}.yml"
          
      - name: Environment compose file exists
        if: steps.check_env_compose.outputs.files_exists == 'true'
        run: echo "COMPOSE_FILE=$COMPOSE_FILE" >> $GITHUB_ENV
        env:
          COMPOSE_FILE: profile/${{github.event.inputs.environment}}.yml
      
      - name: Use default compose file
        if: steps.check_env_compose.outputs.files_exists != 'true'
        run: echo "COMPOSE_FILE=$COMPOSE_FILE" >> $GITHUB_ENV
        env:
          COMPOSE_FILE: docker-compose.yml
        
  deploy:
    needs: [config]
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.config.outputs.environment }}
    
    steps:
      - name: Output deployment info
        run: |
          echo "************************************************************"
          echo "**************     DEPLOYMENT INFO       *******************"
          echo "************************************************************"
          echo "Host: ${{needs.config.outputs.host }}"
          echo "environment: ${{needs.config.outputs.environment }}"
          echo "Manager tag: ${{needs.config.outputs.managerTag }}"
          echo "Manager commit: ${{needs.config.outputs.managerCommit }}"
          echo "Compose file: ${{needs.config.outputs.composeFile }}"
          echo "************************************************************"
          echo "************************************************************"
          
      - name: Output secrets to .env file
        shell: bash
        run: |
          jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' <<< "$secrets" > .env
        env:
          secrets: ${{ toJson(secrets) }}

      - run: cat .env
