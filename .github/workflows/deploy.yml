# Automatic or manual deployment of the stack using specified docker manager image tag from docker hub
# or alternatively a git commit can be sepcified to build a custom manager image.
#
# If this is a custom project (i.e. has openremote submodule) or deployment/Dockerfile exists then a
# deployment image will also be built and loaded on the host.
#
# If triggered by a webhook then the payload must contain an inputs object with the same keys as the
# workflow_dispatch inputs
#
# Inputs:
#
# - environment  - used to load the specified environment from github; this can then contain specific
#                  secrets to override default values; these are overlayed ontop of the repo and org
#                  secrets
# - host         - DNS URL for the host (default: secrets.HOST)
# - ssh_user     - SSH username (default: secrets.SSH_USER || root)
# - ssh_password - SSH password (default: secrets.SSH_PASSWORD)
# - ssh_key      - SSH private key (default: secrets.SSH_KEY)
# - ssh_port     - SSH port (default: secrets.SSH_PORT || 22)
# - password     - Admin password to be set on deployment; sets the SETUP_ADMIN_PASSWORD env variable
#                 (default: secrets.SETUP_ADMIN_PASSWORD || secret)
# - managerTag   - The docker tag to pull for the manager image; if not specified then the manager image
#                  will be built using the specified commit or latest branch commit
# - commit       - Which commit or branch to use on this repo (default: branch on which workflow is executed)
# - platform     - The host platform architecture (default: secrets.PLATFORM || linux/amd64)
#
# Secrets:
#
# The following secrets are supported (* are required)
#
# - DOCKERHUB_USER
# - DOCKERHUB_PASSWORD
# - HOST
# - SSH_USER
# - SSH_PORT
# - SSH_PASSWORD
# - SSH_KEY
# - SETUP_ADMIN_PASSWORD


name: Deploy

on:
  # Manually request a deploy
  workflow_dispatch:
    inputs:
      host:
        description: 'Host to deploy to'
      ssh_user:
        description: 'SSH Username'
      ssh_port:
        description: 'SSH port'
      ssh_password:
        description: 'SSH password'
      ssh_key:
        description: 'SSH key'
      password:
        description: 'Admin password override'
      managerTag:
        description: 'Manager docker tag to pull'
      commit:
        description: 'Repo branch or commit SHA to use'
      environment:
        description: 'Environment to use (if any)'
      platform:
        description: 'Host platform architecture'
        default: linux/amd64
      
        
  # Docker push webhook trigger
  repository_dispatch:
    types: [docker-push]

env:
  environment: staging

jobs:

  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
    
      - name: Login to DockerHub
        if: ${{ (secrets.DOCKERHUB_USER != '') && (secrets.DOCKERHUB_PASSWORD != '') }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          
      - name: Output secrets to ENV ready for overwrites from inputs
        run: |
          jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' <<< "$secrets" >> $GITHUB_ENV
        env:
          secrets: ${{ toJson(secrets) }}
          
      - name: Determine host name
        id: host-name
        run: echo "HOST=${{ github.event.inputs.host || env.HOST }}" >> $GITHUB_ENV
        
      - name: Host is set
        if: ${{ env.HOST == '' }}
        run: exit 1
                
      - name: Determine SSH username
        run: echo "SSH_USER=${{ github.event.inputs.ssh_user || env.SSH_USER || 'root' }}" >> $GITHUB_ENV
                
      - name: Determine SSH port
        run: echo "SSH_PORT=${{ github.event.inputs.ssh_port || env.SSH_PORT || '22' }}" >> $GITHUB_ENV
                        
      - name: Determine SSH password
        run: echo "SSH_PASSWORD=${{ github.event.inputs.ssh_password || env.SSH_PASSWORD }}" >> $GITHUB_ENV
                        
      - name: Determine SSH key
        run: echo "SSH_KEY=${{ github.event.inputs.ssh_key || env.SSH_KEY }}" >> $GITHUB_ENV
        
      - name: Determine platform
        run: echo "PLATFORM=${{ github.event.inputs.platform || env.PLATFORM || 'linux/amd64' }}" >> $GITHUB_ENV
          
      - name: Determine password
        id: password
        run: echo "SETUP_ADMIN_PASSWORD=${{ github.event.inputs.password || env.SETUP_ADMIN_PASSWORD || 'secret' }}" >> $GITHUB_ENV

      - name: Check commit input
        uses: actions/checkout@v2
        with:
          ref: ${{github.event.inputs.commit}}
          submodules: recursive
        
      - run: echo "COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        
      - name: Check manager tag input
        if: github.event.inputs.managerTag != ''
        run: |
          docker manifest inspect openremote/manager:${{ github.event.inputs.managerTag }} > /dev/null 2> /dev/null
          
      - name: Check deployment existence
        id: check_deployment_dir
        uses: andstor/file-existence-action@v1
        with:
          files: "deployment/Dockerfile"          
          
      - name: Check custom project
        id: check_custom_project
        uses: andstor/file-existence-action@v1
        with:
          files: "openremote"
        
      - name: Determine compose file path
        id: compose-file
        run: |
          if [ ! -z $ENV_COMPOSE_FILE ]; then
            echo "::set-output name=value::$ENV_COMPOSE_FILE"
          elif [ -f "profile/$ENVIRONMENT.yml" ]; then
            echo "::set-output name=value::profile/$ENVIRONMENT.yml"
          else
            echo "::set-output name=value::docker-compose.yml"
          fi
        env:
          ENV_COMPOSE_FILE: ${{ secrets.COMPOSE_FILE }}
          ENVIRONMENT: ${{ github.event.inputs.environment }}
        
      - name: Determine manager image info
        id: manager-image
        run: |
          
          if [ ! -z $INPUT_TAG ]; then
            echo "::set-output name=tag::$INPUT_TAG"
          elif [ $CUSTOM_PROJECT == 'true' ]; then
            echo "::set-output name=build::true"
            echo "::set-output name=path::openremote/manager/build/install/manager"
            echo "::set-output name=tag::$(cd openremote; git rev-parse --short HEAD; cd ..)"
          else
            echo "::set-output name=build::true"
            echo "::set-output name=path::manager/build/install/manager"
            echo "::set-output name=tag::$(git rev-parse --short HEAD)"
          fi
        env:
          INPUT_TAG: ${{ github.event.inputs.managerTag }}
          INPUT_COMMIT:  ${{ github.event.inputs.commit }}
          CUSTOM_PROJECT: ${{ steps.check_custom_project.outputs.file_exists }}

      - name: Determine deployment image info
        id: deployment-image
        if: steps.check_deployment_dir.outputs.files_exists == 'true'
        run: |
          echo "::set-output name=build::true"
          echo "::set-output name=path::deployment/build"
          echo "::set-output name=tag::$(git rev-parse --short HEAD)"

      - name: Output info
        run: |
          echo "************************************************************"
          echo "**************           INFO            *******************"
          echo "************************************************************"
          echo "Host: ${{ steps.host-name.outputs.value }}"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Platform: ${{ env.PLATFORM }}"
          echo "Repo commit: "
          echo "Compose file: ${{ steps.compose-file.outputs.value }}"
          echo "Manager build: ${{ steps.manager-image.outputs.build == 'true' }}"
          echo "Manager tag: ${{ steps.manager-image.outputs.tag }}"
          echo "Manager build path: ${{ steps.manager-image.outputs.path }}"
          echo "Deployment build: ${{ steps.deployment-image.outputs.build == 'true' }}"
          echo "Deployment tag: ${{ steps.deployment-image.outputs.tag }}"
          echo "Deployment build path: ${{ steps.manager-image.outputs.path }}"
          echo "************************************************************"
          echo "************************************************************"
  
#       - name: Copy compose file (test SSH connection before building)
#         uses: appleboy/scp-action@master
#         with:
#           host: staging.k2.openremote.io
#           username: ubuntu
#           key: ${{ secrets.OPENREMOTE_SSH_PRIVATE_KEY }}
#           source: "aws-docker-compose.yml"
#           target: "~"

  
      - name: Do code build
        run: |
          if [ $BUILD_MANAGER == 'true' ]; then
            echo "./gradlew installDist"
          elif [ $BUILD_DEPLOYMENT == 'true' ]; then
            echo "./gradlew -p deployment installDist"
          fi
        env:
          BUILD_MANAGER: ${{ steps.manager-image.outputs.build }}
          BUILD_DEPLOYMENT: ${{ steps.deployment-image.outputs.build }}
          
      - name: set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: ${{ env.PLATFORM }}

      - name: install buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          install: true

      - name: Build manager image
        if: steps.manager-image.outputs.build == 'true'
        run: echo "docker build --platform $PLATFORM -t openremote/manager:$TAG $BUILD_PATH"
        env:
          TAG: ${{ steps.manager-image.outputs.tag }}
          BUILD_PATH: ${{ steps.manager-image.outputs.path }}

      - name: Build deployment image
        if: steps.deployment-image.outputs.build == 'true'
        run: echo "docker build --platform $PLATFORM -t openremote/deployment:$TAG $BUILD_PATH"
        env:
          TAG: ${{ steps.deployment-image.outputs.tag }}
          BUILD_PATH: ${{ steps.deployment-image.outputs.path }}

      - run: cat .env

