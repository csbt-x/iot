# Automatic or manual deployment of the stack using specified docker manager image tag from docker hub
# or alternatively a git commit can be sepcified to build a custom manager image for deployment

name: Deploy

on:
  # Manually request a deploy
  workflow_dispatch:
    inputs:
      host:
        description: 'Host to deploy to'
        required: true
      password:
        description: 'Admin password override'
      managerTag:
        description: 'Manager docker tag to pull'
      commit:
        description: 'Repo branch or commit SHA to use'
      environment:
        description: 'Environment to use (if any)'
      platform:
        description: 'Platform architecture'
        default: linux/amd64
      
        
  # Docker push webhook trigger
  repository_dispatch:
    types: [docker-push]

env:
  environment: staging

jobs:

  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}

    steps:      
      
      - name: Login to DockerHub
        if: github.event.inputs.managerTag != ''
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          
      - name: Host input missing
        if: ${{ github.event.inputs.host == '' }}
        run: exit 1

      - name: Check commit input
        uses: actions/checkout@v2
        with:
          ref: ${{github.event.inputs.commit}}
          submodules: recursive
        
      - name: Check manager tag input
        if: github.event.inputs.managerTag != ''
        run: |
          docker manifest inspect openremote/manager:${{ github.event.inputs.managerTag }} > /dev/null 2> /dev/null
          
      - name: Check deployment existence
        id: check_deployment_dir
        uses: andstor/file-existence-action@v1
        with:
          files: "deployment/Dockerfile"          
          
      - name: Check custom project
        id: check_custom_project
        uses: andstor/file-existence-action@v1
        with:
          files: "openremote"
        
      - name: Determine compose file path
        id: compose-file
        run: |
          if [ ! -z $ENV_COMPOSE_FILE ]; then
            echo "::set-output name=value::$ENV_COMPOSE_FILE"
          elif [ -f "profile/$ENVIRONMENT.yml" ]; then
            echo "::set-output name=value::profile/$ENVIRONMENT.yml"
          else
            echo "::set-output name=value::docker-compose.yml"
          fi
        env:
          ENV_COMPOSE_FILE: ${{ secrets.COMPOSE_FILE }}
          ENVIRONMENT: ${{ github.event.inputs.environment }}
        
      - name: Determine manager image info
        id: manager-image
        run: |
          
          if [ ! -z $INPUT_TAG ]; then
            echo "::set-output name=tag::$INPUT_TAG"
          elif [ $CUSTOM_PROJECT == 'true' ]; then
            echo "::set-output name=build::true"
            echo "::set-output name=path::openremote/manager/build/install/manager"
            echo "::set-output name=tag::$(cd openremote; git rev-parse --short HEAD; cd ..)"
          else
            echo "::set-output name=build::true"
            echo "::set-output name=path::manager/build/install/manager"
            echo "::set-output name=tag::$(git rev-parse --short HEAD)"
          fi
        env:
          INPUT_TAG: ${{ github.event.inputs.managerTag }}
          INPUT_COMMIT:  ${{ github.event.inputs.commit }}
          CUSTOM_PROJECT: ${{ steps.check_custom_project.outputs.file_exists }}

      - name: Determine deployment image info
        id: deployment-image
        if: steps.check_deployment_dir.outputs.files_exists == 'true'
        run: |
          echo "::set-output name=build::true"
          echo "::set-output name=path::deployment/build"
          echo "::set-output name=tag::$(git rev-parse --short HEAD)"

      - run: echo "PLATFORM=${{ secrets.PLATFORM || github.event.inputs.platform || 'linux/amd64' }}" >> $GITHUB_ENV

      - name: Output info
        run: |
          echo "************************************************************"
          echo "**************           INFO            *******************"
          echo "************************************************************"
          echo "Host: ${{ github.event.inputs.host }}"
          echo "Environment: ${{ steps.environment.outputs.value }}"
          echo "Platform: ${{ env.PLATFORM }}"
          echo "Repo commit: $(git rev-parse --short HEAD)"
          echo "Compose file: ${{ steps.compose-file.outputs.value }}"
          echo "Manager build: ${{ steps.manager-image.outputs.build == 'true' }}"
          echo "Manager tag: ${{ steps.manager-image.outputs.tag }}"
          echo "Manager build path: ${{ steps.manager-image.outputs.path }}"
          echo "Deployment build: ${{ steps.deployment-image.outputs.build == 'true' }}"
          echo "Deployment tag: ${{ steps.deployment-image.outputs.tag }}"
          echo "Deployment build path: ${{ steps.manager-image.outputs.path }}"
          echo "************************************************************"
          echo "************************************************************"
  
#       - name: Copy compose file
  
      - name: Do code build
        run: |
          if [ $BUILD_MANAGER == 'true' ]; then
            echo "./gradlew installDist"
          elif [ $BUILD_DEPLOYMENT == 'true' ]; then
            echo "./gradlew -p deployment installDist"
          fi
        env:
          BUILD_MANAGER: ${{ steps.manager-image.outputs.build }}
          BUILD_DEPLOYMENT: ${{ steps.deployment-image.outputs.build }}
          
      - name: set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: ${{ env.PLATFORM }}

      - name: install buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          install: true

      - name: Build manager image
        if: steps.manager-image.outputs.build == 'true'
        run: echo "docker build --platform $PLATFORM -t openremote/manager:$TAG $BUILD_PATH"
        env:
          TAG: ${{ steps.manager-image.outputs.tag }}
          BUILD_PATH: ${{ steps.manager-image.outputs.path }}

      - name: Build deployment image
        if: steps.deployment-image.outputs.build == 'true'
        run: echo "docker build --platform $PLATFORM -t openremote/deployment:$TAG $BUILD_PATH"
        env:
          TAG: ${{ steps.deployment-image.outputs.tag }}
          BUILD_PATH: ${{ steps.deployment-image.outputs.path }}
          
      - name: Output secrets to .env file
        shell: bash
        run: |
          jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' <<< "$secrets" > .env
        env:
          secrets: ${{ toJson(secrets) }}

      - run: cat .env

