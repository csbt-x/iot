# Automatic or manual deployment of the stack using specified docker manager image tag from docker hub
# or alternatively a git commit can be sepcified to build a custom manager image for deployment

name: Deploy

on:
  # Manually request a deploy
  workflow_dispatch:
    inputs:
      managerTag:
        description: 'Manager docker tag to pull'
      managerCommit:
        description: 'Repo branch or commit SHA to use'
      environment:
        description: 'Environment to use (if any)'
      host:
        description: 'Host to deploy to'
      password:
        description: 'Admin password to use'
      
        
  # Docker push webhook trigger
  repository_dispatch:
    types: [docker-push]

env:
  environment: staging

jobs:

  config:
    outputs:
      managerTag: ${{ steps.managerTag.outputs.managerTag }}
      managerCommit: ${{ steps.managerCommit.outputs.managerCommit }}
      environment: ${{ steps.environment.outputs.environment }}
    name: Evaluate inputs
    runs-on: ubuntu-latest
    
    steps:
      - name: Login to DockerHub
        if: github.event.inputs.managerTag != ''
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          
      - name: Check host input
        id: host
        if: ${{ github.event.inputs.host == '' }}
        run: exit 1
        
      - name: Check manager tag input
        if: github.event.inputs.managerTag != ''
        id: managerTag
        run: |
          docker manifest inspect openremote/manager:${{ github.event.inputs.managerTag }} > /dev/null 2> /dev/null
          echo "::set-output name=managerTag::${{ github.event.inputs.managerTag }}"
        
      - name: Check commit input
        if: (github.event.inputs.managerCommit != '') && (github.event.inputs.managerTag == '')
        id: managerCommit
        run: |
          git fetch --all
          git show -q > /dev/null 2> /dev/null
          echo "::set-output name=managerCommit::${{ github.event.inputs.managerCommit }}"
        
      - name: Check environment input
        if: github.event.inputs.managerTag != ''
        id: environment
        run: echo "::set-output name=environment::${{ github.event.inputs.environment }}"
        
  deploy:
    needs: [config]
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.config.outputs.environment }}
    
    steps:
      
      - run: echo "Secrets= ${{ toJSON(secrets) }}"
