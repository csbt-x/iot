name: tests

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  tests:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - run: mkdir -p ~/image-cache
      - id: cache-images
        uses: actions/cache@v1
        with:
          path: |
            ~/image-cache
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-test-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'profile/*') }}
          restore-keys: |
            ${{ runner.os }}-test-
      - name: set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Load docker images from cache
        if: steps.cache-images.outputs.cache-hit == 'true'
        run: |
          docker load < ~/image-cache/postgresql.tar.gz
          docker load < ~/image-cache/keycloak.tar.gz
      - name: Save docker images to cache
        if: steps.cache-images.outputs.cache-hit != 'true'
        run: |
          docker pull gradle:7.3.3-jdk17
          docker-compose -f profile/dev-testing.yml pull
          docker images --filter 'reference=openremote/*' --format "{{.Repository}}:{{.Tag}}"
          postgres=$(docker images --filter 'reference=openremote/postgresql' --format "{{.Repository}}:{{.Tag}}")
          keycloak=$(docker images --filter 'reference=openremote/keycloak' --format "{{.Repository}}:{{.Tag}}")
          docker save $postgres | gzip > ~/image-cache/postgresql.tar.gz
          docker save $keycloak | gzip > ~/image-cache/keycloak.tar.gz
      - name: Start keycloak and postgresql for tests
        run: docker-compose -f profile/dev-testing.yml up -d --no-build
      - name: Check running containers
        run: docker ps -a
      - name: Run tests with gradle
        run: ./gradlew clean test
        # Typically it takes 10 minutes to complete tests, default timeout is 6h, to be agile we need to pivot quicker :-)
        timeout-minutes: 60
      - name: Share tests artifacts
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: tests-run-artifacts
          path: |
            test/build/reports/tests/test
