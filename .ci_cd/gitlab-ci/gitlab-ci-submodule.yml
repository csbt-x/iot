default:
  interruptible: true
  image: docker:latest
  services:
    - docker:dind # Docker in docker service

variables:
  ## Following 3 variables should be defined as GitLab CI/CD variables
  #PROJECT_NAME:
  #DEPLOYMENT_HOST_USER:
  #DEPLOYMENT_PORT:
  GIT_SUBMODULE_STRATEGY: normal
  DAST_WEBSITE: https://staging.${PROJECT_NAME}.${DOMAIN}

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "master"
      when: never
    - when: always

stages:
  - build_staging
  - build_fail
  - test
  - tests_fail
  - deploy
  - notify_deploy_staging_fail
  - dast
  - build_production
  - deploy_production
  - deploy_production_clean
  - notify_deploy_production

.build_template: &build_definition
  variables:
    SCAN_IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
    MANAGER_IMAGE_TAG: $CI_REGISTRY_IMAGE/manager:$CI_ENVIRONMENT_SLUG
    DEPLOY_IMAGE_TAG: $CI_REGISTRY_IMAGE/deployment:$CI_ENVIRONMENT_SLUG
    PROXY_IMAGE_TAG: $CI_REGISTRY_IMAGE/proxy:$CI_ENVIRONMENT_SLUG
    POSTGRE_IMAGE_TAG: $CI_REGISTRY_IMAGE/postgresql:$CI_ENVIRONMENT_SLUG
    KEYCLO_IMAGE_TAG: $CI_REGISTRY_IMAGE/keycloak:$CI_ENVIRONMENT_SLUG
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker run -v $(pwd):/or -v $(pwd)/logs:/root/.npm/_logs registry.gitlab.com/openremote/openremote:master
      /bin/sh -c "./gradlew --console plain clean installDist"
    - docker run -v $(pwd):/or
      -v /var/run/docker.sock:/var/run/docker.sock
      -e "CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE"
      -e "CI_ENVIRONMENT=$CI_ENVIRONMENT_SLUG"
      registry.gitlab.com/openremote/openremote:master
      /bin/sh -c "docker-compose -f profile/$CI_ENVIRONMENT_SLUG.yml build"
    - docker images
    # Image for container scanning
    - docker tag $MANAGER_IMAGE_TAG $SCAN_IMAGE_TAG
    - docker push $SCAN_IMAGE_TAG
    # Push to registry
    - docker push "$MANAGER_IMAGE_TAG"
    - docker push "$DEPLOY_IMAGE_TAG"
    - docker push "$PROXY_IMAGE_TAG"
    - docker push "$POSTGRE_IMAGE_TAG"
    - docker push "$KEYCLO_IMAGE_TAG"
    # Tag for possible rollback
    - if [ $CI_COMMIT_TAG ]; then
    - docker tag "$CI_REGISTRY_IMAGE/manager:$CI_ENVIRONMENT_SLUG" "$CI_REGISTRY_IMAGE/manager:$CI_ENVIRONMENT_SLUG-$CI_COMMIT_TAG"
    - docker tag "$CI_REGISTRY_IMAGE/deployment:$CI_ENVIRONMENT_SLUG" "$CI_REGISTRY_IMAGE/deployment:$CI_ENVIRONMENT_SLUG-$CI_COMMIT_TAG"
    - docker tag "$CI_REGISTRY_IMAGE/proxy:$CI_ENVIRONMENT_SLUG" "$CI_REGISTRY_IMAGE/proxy:$CI_ENVIRONMENT_SLUG-$CI_COMMIT_TAG"
    - docker tag "$CI_REGISTRY_IMAGE/postgresql:$CI_ENVIRONMENT_SLUG" "$CI_REGISTRY_IMAGE/postgresql:$CI_ENVIRONMENT_SLUG-$CI_COMMIT_TAG"
    - docker tag "$CI_REGISTRY_IMAGE/keycloak:$CI_ENVIRONMENT_SLUG" "$CI_REGISTRY_IMAGE/keycloak:$CI_ENVIRONMENT_SLUG-$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE/manager:$CI_ENVIRONMENT_SLUG-$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE/deployment:$CI_ENVIRONMENT_SLUG-$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE/proxy:$CI_ENVIRONMENT_SLUG-$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE/postgresql:$CI_ENVIRONMENT_SLUG-$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE/keycloak:$CI_ENVIRONMENT_SLUG-$CI_COMMIT_TAG"
    - fi
  artifacts:
    when: on_failure
    paths:
      - "logs/*"
    expire_in: 4 weeks

.notify_whatsapp: &notify_whatsapp
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  allow_failure: true
  variables:
    GIT_STRATEGY: none
  script:
    - >
      curl --location --request POST $WHATSAPP_API
      --header 'Content-Type: application/javascript'
      --data-raw "{
      \"message\": \"Your $CI_PROJECT_TITLE+$CI_JOB_STAGE code is $CI_JOB_NAME\",
      \"recipient\": \"$WHATSAPP_TEL\",
      \"user_id\": \"1\"
      }"
  retry:
    max: 2

build staging docker images:
  stage: build_staging
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /skip-build/
  environment: staging
  <<: *build_definition

build manually staging docker images:
  stage: build_staging
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /skip-build/
      when: manual
  allow_failure: true
  environment: staging
  <<: *build_definition

.email_template: &notify_email
  image: docker:latest
  # Do not clone git repo as it can fail and sending mail'll fail too
  variables:
    GIT_SUBMODULE_STRATEGY: none
  before_script:
    - cat $AWS_MAIL > aws_mail.py
  script:
    - docker pull registry.gitlab.com/openremote/openremote:master
    - export WHO=$(docker run --rm -v $(pwd):/or registry.gitlab.com/openremote/openremote:master git log --pretty="%ce" -1)
    - export WHEN=$(docker run --rm -v $(pwd):/or registry.gitlab.com/openremote/openremote:master git log --pretty="%ad %ar" -1)
    - export WHAT=$(docker run --rm -v $(pwd):/or registry.gitlab.com/openremote/openremote:master git log --pretty="%h %s" -1)
    - export REPO=$(docker run --rm -v $(pwd):/or registry.gitlab.com/openremote/openremote:master git remote get-url origin|xargs basename)
    - echo $REPO
    - docker run -v $(pwd):/usr/src/myapp -w /usr/src/myapp
      -e "STAGE=$CI_JOB_STAGE"
      -e "WHO=$WHO"
      -e "WHAT=$WHAT"
      -e "WHEN=$WHEN"
      -e "REPO=$REPO"
      -e "SMTP_USERNAME=$SMTP_USERNAME"
      -e "SMTP_PASSWORD=$SMTP_PASSWORD"
      --rm python:3 python aws_mail.py
  retry:
    max: 2

# This step is executed when build fails. The purpose is to e-mail a git commiter about the problem.
email failed pipeline:
  stage: build_fail
  needs: ["build staging docker images"]
  <<: *notify_email
  when: on_failure

build FAILED:
  stage: build_fail
  needs: ["build staging docker images"]
  <<: *notify_whatsapp
  when: on_failure

test-master:
  stage: test
  needs: []
  allow_failure: false
  before_script:
    - docker run -v $(pwd):/or
      -v /var/run/docker.sock:/var/run/docker.sock registry.gitlab.com/openremote/openremote:master
      /bin/sh -c "docker-compose -f openremote/profile/dev-testing.yml pull"
    - docker run -v $(pwd):/or
      -v /var/run/docker.sock:/var/run/docker.sock registry.gitlab.com/openremote/openremote:master
      /bin/sh -c "docker-compose -f openremote/profile/dev-testing.yml up --no-build -d"
  script:
    #- docker run --network host -v $(pwd):/or registry.gitlab.com/openremote/openremote:master
    #  /bin/sh -c "./gradlew clean test"
    - echo Tests moved to github actions
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /skip-test/
      when: on_success
  artifacts:
    when: on_failure
    paths:
      - "openremote/test/build/reports/tests/test/*"
      - "openremote/test/build/reports/tests/test/*/*"
    expire_in: 4 weeks
  timeout: 30m

email failed tests:
  stage: tests_fail
  needs: ["test-master"]
  <<: *notify_email
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /skip-test/
      when: on_failure

test FAILED:
  stage: tests_fail
  needs: ["test-master"]
  <<: *notify_whatsapp
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /skip-test/
      when: on_failure

include:
  - template: Container-Scanning.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: License-Scanning.gitlab-ci.yml
  #  - template: SAST.gitlab-ci.yml
  - template: DAST.gitlab-ci.yml

.ssh_config: &ssh_config
  - mkdir -p ~/.ssh
  - chmod 600 "$GITLAB_SSH_PRIVATE_KEY"
  - eval "$(ssh-agent -s)"
  - ssh-add "$GITLAB_SSH_PRIVATE_KEY"
  - ssh-keyscan -H -p $DEPLOYMENT_PORT $DEPLOYMENT_HOST >> ~/.ssh/known_hosts
  - alias SSH="ssh -p $DEPLOYMENT_PORT ${DEPLOYMENT_HOST_USER}@${DEPLOYMENT_HOST}"
  - alias SCP="scp -p -r -P $DEPLOYMENT_PORT"

.deploy_template: &deploy_definition
  before_script:
    - *ssh_config
  script:
    - echo "Deploy to $CI_ENVIRONMENT_SLUG server"
    - echo "export PROJECT_NAME=$PROJECT_NAME" >> deploy.sh
    - echo "export CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE" >> deploy.sh
    - if [ ! $DOCKER_IMAGE_TAG ]; then echo "export CI_ENVIRONMENT=$CI_ENVIRONMENT_SLUG" >> deploy.sh; fi
    - if [ $DOCKER_IMAGE_TAG ]; then echo "export CI_ENVIRONMENT=$DOCKER_IMAGE_TAG" >> deploy.sh; fi
    - echo "export SETUP_WIPE_CLEAN_INSTALL=$SETUP_WIPE_CLEAN_INSTALL" >> deploy.sh
    - if [ $SETUP_ADMIN_PASSWORD ]; then echo "export SETUP_ADMIN_PASSWORD=$SETUP_ADMIN_PASSWORD" >> deploy.sh; fi
    - echo "echo ${OR_PASSWORD} | docker login -u openremote --password-stdin $CI_REGISTRY || exit 666" >> deploy.sh
    - echo "docker pull $CI_REGISTRY_IMAGE/manager:\$CI_ENVIRONMENT"   >> deploy.sh
    - echo "docker pull $CI_REGISTRY_IMAGE/deployment:\$CI_ENVIRONMENT">> deploy.sh
    - echo "docker pull $CI_REGISTRY_IMAGE/proxy:\$CI_ENVIRONMENT"     >> deploy.sh
    - echo "docker pull $CI_REGISTRY_IMAGE/postgresql:\$CI_ENVIRONMENT">> deploy.sh
    - echo "docker pull $CI_REGISTRY_IMAGE/keycloak:\$CI_ENVIRONMENT"  >> deploy.sh
    # Dump DB if it exists for possible data restoration
    - echo "if [ \"\$(docker ps --filter name=${PROJECT_NAME}_postgresql_1 -q)\" ]; then docker exec ${PROJECT_NAME}_postgresql_1 pg_dump -U postgres openremote > dump/\$RANDOM.sql; fi || exit 666" >> deploy.sh
    - echo "docker-compose -p $PROJECT_NAME -f profile/$CI_ENVIRONMENT_SLUG.yml down || exit 666" >> deploy.sh
    - echo "docker volume rm ${PROJECT_NAME}_deployment-data" >> deploy.sh
    - echo "docker-compose -p $PROJECT_NAME -f profile/$CI_ENVIRONMENT_SLUG.yml up --no-build -d || exit 666" >> deploy.sh
    - echo "docker cp FIREBASE_CONFIG_FILE ${PROJECT_NAME}_manager_1:/deployment/manager/fcm.json || exit 666" >> deploy.sh
    - echo "docker restart ${PROJECT_NAME}_manager_1 || exit 666" >> deploy.sh
    - chmod +x deploy.sh
    - SSH mkdir -p dump profile openremote/profile deployment openremote/proxy openremote/manager/build/install/manager openremote/postgresql openremote/keycloak
    - SCP ./profile/ deploy.sh ${DEPLOYMENT_HOST_USER}@${DEPLOYMENT_HOST}:~/
    - SCP ./openremote/profile/* ${DEPLOYMENT_HOST_USER}@${DEPLOYMENT_HOST}:~/openremote/profile/
    - SCP ${FIREBASE_CONFIG_FILE} ${DEPLOYMENT_HOST_USER}@${DEPLOYMENT_HOST}:~/FIREBASE_CONFIG_FILE
    - SSH ./deploy.sh
    - SSH "docker system prune -f"
  after_script:
    - *ssh_config
    - SSH "docker-compose -p ${PROJECT_NAME} -f profile/${CI_ENVIRONMENT_SLUG}.yml logs --no-color --timestamp > ${CI_ENVIRONMENT_SLUG}.log"
    - SCP ${DEPLOYMENT_HOST_USER}@${DEPLOYMENT_HOST}:~/${CI_ENVIRONMENT_SLUG}.log .
    - tail -n 100 ${CI_ENVIRONMENT_SLUG}.log
    - SSH "rm ~/${CI_ENVIRONMENT_SLUG}.log"
  artifacts:
    when: on_failure
    paths:
      - ${CI_ENVIRONMENT_SLUG}.log
    expire_in: 4 weeks

deploy staging:
  stage: deploy
  variables:
    DEPLOYMENT_HOST: ${CI_ENVIRONMENT_SLUG}.${PROJECT_NAME}.${DOMAIN}
    SETUP_WIPE_CLEAN_INSTALL: "true"
  environment:
    name: staging
    url: https://${CI_ENVIRONMENT_SLUG}.${PROJECT_NAME}.${DOMAIN}
  <<: *deploy_definition

deploy staging when tests fail:
  stage: deploy
  needs: ["email failed tests"]
  when: manual
  variables:
    DEPLOYMENT_HOST: ${CI_ENVIRONMENT_SLUG}.${PROJECT_NAME}.${DOMAIN}
    SETUP_WIPE_CLEAN_INSTALL: "true"
  environment:
    name: staging
    url: https://${CI_ENVIRONMENT_SLUG}.${PROJECT_NAME}.${DOMAIN}
  <<: *deploy_definition

email failed deploy staging:
  stage: notify_deploy_staging_fail
  needs: ["deploy staging"]
  <<: *notify_email
  when: on_failure

deploy staging FAILED:
  stage: notify_deploy_staging_fail
  needs: ["deploy staging"]
  <<: *notify_whatsapp
  when: on_failure

build production docker images:
  stage: build_production
  when: manual
  allow_failure: false
  environment: production
  <<: *build_definition

deploy production:
  stage: deploy_production
  needs: ["build production docker images"]
  variables:
    DEPLOYMENT_HOST: ${PROJECT_NAME}.${DOMAIN}
    SETUP_WIPE_CLEAN_INSTALL: "false"
  environment:
    name: production
    url: https://${PROJECT_NAME}.${DOMAIN}
  <<: *deploy_definition

deploy production clean:
  stage: deploy_production_clean
  when: on_failure
  needs: ["build production docker images"]
  variables:
    DEPLOYMENT_HOST: ${PROJECT_NAME}.${DOMAIN}
    SETUP_WIPE_CLEAN_INSTALL: "true"
  environment:
    name: production
    url: https://${PROJECT_NAME}.${DOMAIN}
  <<: *deploy_definition

deploy production PASSED:
  stage: notify_deploy_production
  <<: *notify_whatsapp

deploy production FAILED:
  stage: notify_deploy_production
  needs: ["build production docker images"]
  <<: *notify_whatsapp
  when: on_failure
