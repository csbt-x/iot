---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Template to install OpenRemote 3 stack on AWS environment on ubuntu'
Parameters:
  OpenRemotePassword:
    Description: Password for OpenRemote admin login
    Type: String
    Default: secret
  DomainName:
    Description: DNS domain for created stack (clear it is you want the deployment with an insecure SSL certificate)
    Type: String
    Default: developers.openremote.io
  HostName:
    Description: Hostname of the Openremote manager
    Type: String
    Default: demo-arm
  HostedZone:
    Description: Use AWS hosted zone
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: openremote
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type (don't change it unless you know what you are doing)
    Type: String
    # AWS Compute Optimizer reports that this instance type is under-provisioned and advise to use
    # more than double the price instance. However, it works in our test setup.
    Default: t4g.micro
    ConstraintDescription: must be a valid EC2 instance type.
  InstanceAMI:
    Description: Managed AMI ID for EC2 Instance (don't change it unless you know what you are doing)
    Type : String
    Default: ami-03ec287fa560a6ccc
Conditions:
  DnsRecordCreate: !Equals [!Ref HostedZone, true]
  DomainName: !Not [ !Equals [!Ref DomainName, ""] ]
Outputs:
    InstanceIP:
      Description: The Instance public IP
      Value: !GetAtt EC2Instance.PublicIp
    PublicUrl:
      Condition: DomainName
      Description: OpenRemote Instance URL
      Value: !Join [ ".", [ !Ref HostName, !Ref DomainName ] ]
Resources:
  DNSRecord:
    Condition: DnsRecordCreate
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join [ "", [ !Ref DomainName, "." ] ]
      Name: !Join [ ".", [!Ref HostName, !Ref DomainName ] ]
      ResourceRecords:
      - !GetAtt EC2Instance.PublicIp
      TTL: '60'
      Type: A
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      ImageId:
        Ref: InstanceAMI
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      Tags:
        - Key: "Name"
          Value: "Openremote v3"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Create swap file
          sudo fallocate -l 1G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
          sysctl vm.swappiness=10
          sysctl vm.vfs_cache_pressure=50
          echo vm.swappiness=10 | sudo tee -a /etc/sysctl.conf
          echo vm.vfs_cache_pressure=50 | sudo tee -a /etc/sysctl.conf
          free -h
          cat /proc/sys/vm/swappiness
          cat /proc/sys/vm/vfs_cache_pressure
          sudo apt update
          # Install docker
          sudo groupadd docker
          sudo gpasswd -a ubuntu docker
          sudo apt install docker.io -y
          sudo apt install docker-compose -y
          # Install openremote-cli tool
          sudo apt install python3-pip -y
          sudo pip3 install -U openremote-cli
          # Prepare deployment files
          cd /home/ubuntu # we need this because on arm docker-compose cannot read /
          # Create volume for deployment (needed for SWARM due to concurency in compose-file)
          docker volume create openremote_deployment-data
          docker run --rm -v openremote_deployment-data:/deployment openremote/deployment:latest
          wget https://github.com/openremote/openremote/raw/master/mvp/mvp-docker-compose.yml
          docker swarm init
          if [ ${HostName} ] && [ ${DomainName} ]
          then
            echo export DOMAINNAME=${HostName}.${DomainName} >> deploy.sh
            echo 'export EXTERNAL_URL=https://$DOMAINNAME' >> deploy.sh
          elif [ ${DomainName} ]
          then
            echo export DOMAINNAME=${DomainName} >> deploy.sh
            echo 'export EXTERNAL_URL=https://$DOMAINNAME' >> deploy.sh
          elif [ ${HostName} ]
          then
            echo export DOMAINNAME=${HostName} >> deploy.sh
            echo export 'EXTERNAL_URL=https://$(curl http://169.254.169.254/latest/meta-data/public-ipv4)' >> deploy.sh
          else
            echo export DOMAINNAME=localhost >> deploy.sh
            echo export 'EXTERNAL_URL=https://$(curl http://169.254.169.254/latest/meta-data/public-ipv4)' >> deploy.sh
          fi
          echo export SETUP_ADMIN_PASSWORD=${OpenRemotePassword} >> deploy.sh
          echo export LE_EMAIL=me@privacy.net >> deploy.sh
          # Running docker-compose before docker stack deploy has to do with AWS
          # problems to fetch letsencrypt CERT in the swarm mode.
          echo 'docker-compose -f mvp-docker-compose.yml -p openremote up -d' >> deploy.sh
          #echo sleep 10 >> deploy.sh # give time to fetch CERT from letsencrypt
          #echo 'docker-compose -f demo-basic-no-build.yml -p openremote down' >> deploy.sh
          #echo openremote-cli deploy -v >> deploy.sh
          chmod +x deploy.sh
          chown --recursive 1000:1000 *
          ./deploy.sh
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH + HTTP + HTTPS
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: '8'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
